# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-uEgU_Hq3wQnPZ-pVFWz9dRUUhwlby06
"""

#pip install replicate

#r8_SWp24LJcA2yFiXklelFnK6puztNtxjv20hxYk

# Commented out IPython magic to ensure Python compatibility.
# %env REPLICATE_API_TOKEN= r8_SWp24LJcA2yFiXklelFnK6puztNtxjv20hxYk
import cohereNegativityClassification
import replicate
import rep
import time
big_list_prompt = """

Eyes:

Droopy or heavy eyelids
Frequent blinking
Red or watery eyes
Difficulty keeping eyes open
Facial Expression:
\n
Yawning
Blank or unfocused stare
Slow or delayed responses to questions
Body Language:
\n
Slouched posture
Restlessness or fidgeting
Slow movements
Nodding off or head bobbing
Speech:
\n
Slurred speech
Monotone or lack of inflection
Incoherent or disjointed responses
Behavioral Cues:
\n
Difficulty staying awake or alert
Difficulty concentrating or maintaining attention
Lack of awareness of surroundings
Microsleep episodes (brief, involuntary periods of sleep)
Physical Signs:
\n
Fatigue-related signs such as rubbing eyes or face
Appearing disoriented or confused
Excessive yawning or stretching
Reaction Time:
\n
Delayed reactions to external stimuli
Slow responses to instructions or commands
External Factors:
\n
Time of day (late at night or early morning)
Previous activities (e.g., driving long distances)


"""
prompts = [f"Check if the person driving is sleepy by looking at {i}" for i in big_list_prompt.split('\n') ]
def getInfo(imgSrcLst, prompts):
    data = []
    for src in imgSrcLst:
        for p in prompts:
            output = replicate.run(
                "yorickvp/llava-13b:e272157381e2a3bf12df3a8edd1f38d1dbd736bbb7437277c8b34175f8fce358",
                input={
                    "image": src,
                    "top_p": 0.4,
                    "prompt": p,
                    "max_tokens": 50,
                    "temperature": 0.1
                }
            )
            txt = [' '.join(output)]
            #score = cohereNegativityClassification.get_scores(txt)[0]
            #score = cohereNegativityClassification.get_scores(txt)[0]
            score = 1
            if (not (-0.2 <= score <= 0.2)):
                data.append((txt,score * -100))
            #print((p,' '.join(output)))

    return data

src = [rep.jpg_to_data_uri("download (2).jpg")]
start_time = time.time()
fun = getInfo(src, ["Do you think the driver is in a condition unfit to driver, if so, describe his actions and the situation"])
end_time = time.time()
elapsed_time = end_time - start_time

print(f"Time taken to run the function: {elapsed_time} seconds")